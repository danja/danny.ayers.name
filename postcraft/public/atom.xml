<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Rawer</title>
    todo

    <link href=""/>
    <updated></updated>
    <id></id>
    <author>
        <name></name>

    </author>
<entry>
    <title>
        This feed isn't formatted properly yet
   </title>
   <content>
      <h1>Journal 2025-05-19</h1>
<h2>Inversion of control</h2>
<p>For a change this afternoon the <strong>AI has given me directions</strong>.</p>
<p><img src="/images/2025-05/dickens.png" alt="Robot instructs Dickension mill worker"></p>
<p>My priority at the moment is getting #:semem organized, but to that end I need some extras in #:transmissions, and better SPARQL UI... So I&#39;ve been on a little cycle round the subprojects. Which today has led me to #:tbox, which is just a Docker setup with containers that will hopefully, eventually, run the projects in a unified, consistent, portable fashion.</p>
<p>I&#39;m not very good with Docker, hate this kind of admin. After a bit of discussion with Claude I decided I need CI/CD on my thing. GitHub workflows are relatively new to me - and it&#39;s more of the same kind of admin. So I asked Claude how I should tidy up #:tbox and also how to do testing/CI. Two artifacts, 3 pages each, which I&#39;ve printed. This afternoon I&#39;ll just work through them. At least until I get distracted by the need to do one of the real-world chores I&#39;ve been procrastinating over. Faced with a more boring task, cleaning the kitchen seems a lot more manageable.</p>
<p>PS. I started following Claude&#39;s instructions, but only got so far because one of the services I want #:tbox running, Prosody XMPP, isn&#39;t working. A problem I was aware of, but I&#39;d thought it better to get the tests in place first.</p>
<p>So now I&#39;m in the process of fixing that breakage using GPT-4.1 in Windsurf. In other words, <strong>I&#39;m delegating...</strong></p>
<p><img src="/images/2025-05/delegate.png" alt="Dickension mill worker instructs junior robot"></p>
<p>Progress! (As a Dickensian mill boss might say).</p>
<p>Funnily enough, the code the junior agent is now working on is from #:tia, which I&#39;m aiming to use as an ecosystem in which to create agents. (<a href="">dogbot</a>)</p>
<pre><code class="language-sh">...
[SENDER] OUT
&lt;message type=&quot;chat&quot; to=&quot;alice@localhost&quot;&gt;&lt;body&gt;Hello from dogbot client!&lt;/body&gt;&lt;/message&gt;
[SENDER] Message sent!
[SENDER] status closing
[RECEIVER] IN
&lt;message type=&quot;chat&quot; from=&quot;danja@localhost/OzwPtYKq&quot; to=&quot;alice@localhost&quot;&gt;&lt;body&gt;Hello from dogbot client!&lt;/body&gt;&lt;/message&gt;
[RECEIVER] Received message: Hello from dogbot client!
</code></pre>
<p><img src="/images/2025-05/children.png" alt="Junior robot instructs children"></p>
<p>I predict a riot!</p>
<p><img src="/images/2025-05/riot.png" alt="Robot riot">
 </p>
<h1>Journal 2025-05-18</h1>
<h2>Front-end Joys</h2>
<p><a href="https://github.com/danja/trestle">Trestle</a> is the latest incarnation of my browser-based outliner, formally known as <em>Trellis</em>. It&#39;s <em>heavily</em> influenced by <a href="https://workflowy.com">Workflowy</a>, a great online tool I&#39;ve been using on &amp; off for years.  </p>
<p>But the idea is that it&#39;s simply <em>Yet Another</em> view of RDF data in a SPARQL store. It just happens to focus on tree-shaped stuff.</p>
<p><img src="/images/2025-05/front-end.png" alt="Front End"></p>
<p>Trellis had gone stale so I updated it a few months back. Decided to rename #:trestle because it did sound rather like Trello, which is in a similar space. I swapped out a heap of JQuery based code for more recent vanilla JS, totally rebuilt the architecture (now solidly MVC with added #:evb, my minimal event bus).</p>
<p>Right now it only captures root + parent-child relationships (with the children indexed to make the RDF easier). I want to add typing on nodes, a <em>very-soon</em> use case being sorting out my TODOs, using terms from the <a href="http://purl.org/stuff/project">project vocab</a> I threw together 20 years ago.</p>
<p>But before that, there was a bunch of little UI bits I hadn&#39;t implemented. Hamburger menu, breadcrumbs etc.</p>
<p>I thought this would be a quick job with AI. Nah. Took several hours with little progress. Interestingly 3 different LLMs got themselves stuck in the exact same create-break-<em>fix-no-fix-no</em>... loop (Claude Sonnet, GPT-4.1 &amp; SWI-1, whatever that is, in <a href="https://windsurf.com/editor">Windsurf formerly Codium</a>).</p>
<p>But I found it educational, I don&#39;t really do <em>proper</em> front-end stuff very often. GPT-4.1 had me poking around for computed layout bits, posting code into the browser console.</p>
<p>This does seem like an obvious job for MCP. I did have a quick look at a <a href="https://github.com/modelcontextprotocol/servers/tree/main/src/puppeteer">server for Puppeteer</a> the other day but couldn&#39;t get it working. I mentioned it to <a href="http://danbri.org">danbri</a>, he found <a href="https://github.com/robertheadley/chrome-debug-mcp">Chrome Debug MCP</a> and <a href="https://github.com/lxe/chrome-mcp">Chrome MCP</a>.
Next time.
 </p>
<h1>Journal 2025-05-17</h1>
<h2>Links</h2>
<h3><a href="https://deepwiki.com/">DeepWiki</a></h3>
<p>This thing is very nice. It uses Devin AI to analyze a given GitHub repo and generate docs. Right now it&#39;s free to use, so I&#39;ve already slapped a button on several of my repos. The docs are quite comprehensive, but it&#39;s worth noting that they focus on the nuts &amp; bolts. So for example the <a href="https://deepwiki.com/danja/transmissions">DeepWiki for Transmissions</a> dives straight into <em>Architecture Overview</em>, from a <strong>Transmissions Developer</strong>&#39;s point of view. But it&#39;s a mini-framework, the docs should start from the pov of <strong>Transmissions User</strong>. The whole point is that most of the nuts &amp; bolts are hidden.</p>
<p>You can apparently also ask Devin about the repo via an LLM chat interface, but so far, for me it seems to time out.
 </p>
<h1>Journal 2025-05-16</h1>
<p><strong>Blog <del>might be</del> is back!</strong></p>
<p>Ok, that was arduous. I had to rewrite a big chunk of the core code for #:transmissions, my pipeliney thing. It&#39;d simply got too spaghettified. But barring a handful of minor misalignment problems, it&#39;s working again. #:postcraft is the canonical app, this blog is published using it.</p>
<p><img src="/images/2025-05/blog-back.png" alt="Cartoon illustration"></p>
<p><em>Before going any further, I will declare that <strong>I&#39;ve been busy!</strong>
A bunch of stuff I&#39;ve been working on is approaching the point where it might be worth putting in front of other eyebrows, if not yet eyeballs. I&#39;m planning to get <em>something</em> of each of the bits at least relatively stable &amp; written up enough to look at by the summer solstice. To allow breathing space, I&#39;ll review for a bit, properly announce anything worthwhile on 2025-07-03.</em></p>
<p>#:postcraft is possibly the world&#39;s most over-engineered Static Site Builder. After crawling dirs for markdown files it posts the material off to a SPARQL store. Then another pipeline is set up to query the store and render the site.</p>
<p>The over-engineering is intentional. The data in the SPARQL store is there for other uses. A couple of days ago I got #:semem, my Semantic Memory thing to create embeddings from the content and allow this to be used for &#39;semantic search&#39;.</p>
<p>Btw, the #:semtags do have a purpose : <strong>Semantic Hashtags</strong>. I&#39;ve a very short, simple spec written for them here somewhere - the <code>#:</code> marker says the string that follows has some kind of significance in the the current domain. In practice, they are a markdown extension that I intend to use here by replacing with a link to a query on a service - a search, but ultimately using #semem as the engine.</p>
<p>For a first pass I&#39;m thinking of templating a query, something like :</p>
<pre><code class="language-sparql">PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;
PREFIX skos: &lt;http://www.w3.org/2004/02/skos/core#Concept&gt;

SELECT ?resources WHERE {

    ?c a skos:Concept ;
       rdfs:label ?label ;
       rdfs:seeAlso ?resources .

   FILTER regex(?label, &quot;^{{semtag}}&quot;, &quot;i&quot;)
}
</code></pre>
<p>Elsewhere I&#39;ll put together some basic definitions.
 </p>
<h1>Journal 2025-05-10</h1>
<p>Setting up Linux Mint. 
 </p>

      </content>
    </entry>
</feed>